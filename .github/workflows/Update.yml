name: Build, Release, and Upload to Server

on:
  push:
    branches:
      - main  # Запуск при пуше в основную ветку 

jobs:
  build:
    name: Archive and Upload Resource Packs
    runs-on: ubuntu-latest  # Используем последнюю версию Ubuntu для выполнения шагов

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4  # Клонируем репозиторий для доступа к его содержимому

      - name: Generate tag and push it
        run: |
          TAG_NAME="v$(date +'%Y%m%d-%H%M%S')"  # Генерируем уникальный тег на основе текущей даты и времени
          git config --global user.name "github-actions[bot]"  # Настройка имени пользователя для создания тега
          git config --global user.email "github-actions[bot]@users.noreply.github.com"  # Настройка email для тега
          git tag $TAG_NAME  # Создаём новый тег в репозитории
          git push origin $TAG_NAME  # Отправляем тег в удалённый репозиторий
          echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV  # Записываем тег в переменные окружения для дальнейшего использования

      - name: Create archives
        run: |
          mkdir -p archives  # Создаём папку archives для сохранения архивов
          zip -r archives/MC.PROJECTBW.RU.zip resource_packs/mc.projectbw.ru  # Архивируем ресурсы для mc.projectbw.ru
          zip -r archives/RC.PROJECTBW.RU.zip resource_packs/rc.projectbw.ru  # Архивируем ресурсы для rc.projectbw.ru
          zip -r archives/SB.PROJECTBW.RU.zip resource_packs/sb.projectbw.ru  # Архивируем ресурсы для sb.projectbw.ru
          zip -r archives/MG.PROJECTBW.RU.zip resource_packs/mg.projectbw.ru  # Архивируем ресурсы для mg.projectbw.ru

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v2  # Используем action для создания релиза на GitHub
        with:
          tag_name: ${{ env.TAG_NAME }}  # Используем ранее созданный тег для релиза
          files: archives/*.zip  # Загружаем все архивы в релиз
          body: "Автоматическая сборка ресурсов"  # Тело релиза
          draft: false  # Устанавливаем релиз как готовый для публичного доступа
          prerelease: false  # Устанавливаем релиз как стабильный

      - name: Upload files via SSH
        uses: appleboy/scp-action@v0.1.7  # Используем SCP для загрузки файлов на сервер по SSH
        with:
          host: ${{ secrets.GLOBAL_FTP_HOST }}  # Хост для подключения по SSH
          username: ${{ secrets.GLOBAL_FTP_USERNAME }}  # Имя пользователя для SSH
          password: ${{ secrets.GLOBAL_FTP_PASSWORD }}  # Пароль для SSH
          source: "archives/*.zip"  # Источник архивов для загрузки
          target: "${{ secrets.GLOBAL_FTP_PATH }}"  # Целевая папка на сервере
          strip_components: 1  # Убирает лишние пути, чтобы файлы не оказывались в подкаталоге
          overwrite: true  # Разрешает перезапись существующих файлов на сервере
