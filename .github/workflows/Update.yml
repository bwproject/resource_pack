name: Build, Release, and Upload to Server

on:
  push:
    branches:
      - main  # Запуск при пуше в основную ветку 

jobs:
  build:
    name: Archive and Upload Resource Packs
    runs-on: ubuntu-latest  # Используем последнюю версию Ubuntu для выполнения шагов

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4  # Клонируем репозиторий для доступа к его содержимому

      - name: Generate tag and push it
        run: |
          TAG_NAME="v$(date +'%Y%m%d-%H%M%S')"  # Генерируем уникальный тег на основе текущей даты и времени
          git config --global user.name "github-actions[bot]"  # Настройка имени пользователя для создания тега
          git config --global user.email "github-actions[bot]@users.noreply.github.com"  # Настройка email для тега
          git tag $TAG_NAME  # Создаём новый тег в репозитории
          git push origin $TAG_NAME  # Отправляем тег в удалённый репозиторий
          echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV  # Записываем тег в переменные окружения для дальнейшего использования

      - name: Create archives
        run: |
          mkdir -p archives  # Создаём папку для архивов

          # Перебираем все подпапки внутри resource_packs/
          for dir in resource_packs/*/; do
            dir_name=$(basename "$dir")  # Получаем имя папки, например smp.projectbw.ru
            archive_name=$(echo "$dir_name" | awk '{print toupper($0)}')  # Преобразуем имя архива в верхний регистр

            # Переходим в папку ресурса и архивируем её содержимое (без вложенной директории)
            (cd "$dir" && zip -r "../../archives/${archive_name}.zip" .)
          done

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v2  # Используем action для создания релиза на GitHub
        with:
          tag_name: ${{ env.TAG_NAME }}  # Используем ранее созданный тег для релиза
          files: archives/*.zip  # Загружаем все архивы в релиз
          body: "Автоматическая сборка ресурсов"  # Тело релиза
          draft: false  # Устанавливаем релиз как готовый для публичного доступа
          prerelease: false  # Устанавливаем релиз как стабильный

      - name: Check DNS resolution and ping
        run: |
        nslookup ${{ secrets.GLOBAL_FTP_HOST }}
        ping -c 3 ${{ secrets.GLOBAL_FTP_HOST }}

      - name: Upload files via SSH (rsync)
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.GLOBAL_FTP_HOST }}
          username: ${{ secrets.GLOBAL_FTP_USERNAME }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          script: |
            mkdir -p ${{ secrets.GLOBAL_FTP_PATH }}
            rsync -avz --progress -e "ssh -o StrictHostKeyChecking=no" archives/*.zip ${{ secrets.GLOBAL_FTP_USERNAME }}@${{ secrets.GLOBAL_FTP_HOST }}:${{ secrets.GLOBAL_FTP_PATH }}/

      - name: Upload files via SSH2 (rsync)
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.GLOBAL_FTP_HOST }}
          username: ${{ secrets.GLOBAL_FTP_USERNAME }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          script: |
            mkdir -p ${{ secrets.GLOBAL_FTP_PATH2 }}
            rsync -avz --progress -e "ssh -o StrictHostKeyChecking=no" archives/*.zip ${{ secrets.GLOBAL_FTP_USERNAME }}@${{ secrets.GLOBAL_FTP_HOST }}:${{ secrets.GLOBAL_FTP_PATH2 }}/
